<#
=============================================================================================
Name:           Find Teams with Guests and External Users in Microsoft Teams     
Version:        2.0
Website:        o365reports.com

Script Highlights:  
~~~~~~~~~~~~~~~~~
1. The script exports 2 different reports: 
     -Detailed report: Teams and their guest user details  
     -Summary report: Teams and their guest users count  
2. Automatically installs the Microsoft Teams PowerShell module (if not installed already) upon your confirmation. 
3. Enhanced authentication support including certificate-based authentication and MFA
4. Improved error handling and progress reporting with color-coded output
5. Comprehensive help system with usage examples
6. Enhanced security with proper credential handling
7. Exports the report result to CSV with improved file naming
8. The script is scheduler-friendly with multiple authentication options
9. Better performance with optimized data processing
10. PowerShell best practices compliance

For detailed Script execution: https://o365reports.com/2025/01/14/find-teams-with-guests-and-external-users-in-microsoft-teams/
============================================================================================
#>

param(
    [Parameter(Mandatory = $false)]
    [string]$UserName, 
    # Note: Password parameter kept as string for backward compatibility and automation scenarios
    # For better security, use certificate-based authentication instead
    [string]$Password, 
    [string]$TenantId,
    [string]$AppId,
    [string]$CertificateThumbprint,
    [string]$TeamName,
    [Switch]$SummaryOnly,
    [Switch]$DetailedOnly,
    [Switch]$Help
)

if ($Help) {
    Write-Host @"
SYNOPSIS
    Find Teams with Guests and External Users in Microsoft Teams

DESCRIPTION
    This script identifies Microsoft Teams that contain guest users and external users.
    It generates both detailed and summary reports showing guest user information.

PARAMETERS
    -UserName           : Username for basic authentication
    -Password           : Password for basic authentication  
    -TenantId           : Azure AD Tenant ID for certificate-based authentication
    -AppId              : Application ID for certificate-based authentication
    -CertificateThumbprint : Certificate thumbprint for certificate-based authentication
    -TeamName           : Filter results for a specific team name
    -SummaryOnly        : Generate only the summary report (team names and guest counts)
    -DetailedOnly       : Generate only the detailed report (individual guest details)
    -Help               : Show this help message

AUTHENTICATION OPTIONS
    1. Interactive (Modern Auth) - Default method, supports MFA
    2. Basic Authentication - Using UserName and Password
    3. Certificate-based Authentication - Using TenantId, AppId, and CertificateThumbprint

EXAMPLES
    # Interactive authentication (recommended)
    .\GetTeamsWithGuests.ps1

    # Filter by specific team
    .\GetTeamsWithGuests.ps1 -TeamName "Sales Team"

    # Generate only summary report
    .\GetTeamsWithGuests.ps1 -SummaryOnly

    # Certificate-based authentication for automation
    .\GetTeamsWithGuests.ps1 -TenantId "tenant-id" -AppId "app-id" -CertificateThumbprint "cert-thumbprint"

    # Basic authentication (legacy)
    .\GetTeamsWithGuests.ps1 -UserName "admin@tenant.com" -Password "password"

NOTES
    - The script requires Teams admin permissions to access all teams
    - Certificate-based authentication is recommended for automation scenarios
    - Both detailed and summary reports are generated by default

"@ -ForegroundColor Cyan
    exit 0
} 

#Connect to Microsoft Teams
Write-Host "Checking Microsoft Teams PowerShell module..." -ForegroundColor Cyan
$Module = Get-Module -Name MicrosoftTeams -ListAvailable 
if ($Module.count -eq 0) {
    Write-Host "Microsoft Teams module is not available" -ForegroundColor Yellow 
    $Confirm = Read-Host "Are you sure you want to install the module? [Y] Yes [N] No"
    if ($Confirm -match "[yY]") {
        Write-Host "Installing Microsoft Teams PowerShell module..." -ForegroundColor Magenta
        Install-Module MicrosoftTeams -Scope CurrentUser -Force
        Import-Module MicrosoftTeams
        Write-Host "✓ Microsoft Teams module installed successfully" -ForegroundColor Green
    }
    else {
        Write-Host "Microsoft Teams module is required. Please install module using Install-Module MicrosoftTeams cmdlet." -ForegroundColor Red
        Exit
    }
}
else {
    Write-Host "✓ Microsoft Teams module is available" -ForegroundColor Green
    Import-Module MicrosoftTeams -Force
}


#Connect to MS Teams
Write-Host "Connecting to Microsoft Teams..." -ForegroundColor Cyan
try {
    # Certificate-based authentication (recommended for automation)
    if (($TenantId -ne "") -and ($AppId -ne "") -and ($CertificateThumbprint -ne "")) {  
        Write-Host "Using certificate-based authentication..." -ForegroundColor Yellow
        $Team = Connect-MicrosoftTeams -TenantId $TenantId -ApplicationId $AppId -CertificateThumbprint $CertificateThumbprint 
    }
    # Basic authentication with credentials
    elseif (($UserName -ne "") -and ($Password -ne "")) {
        Write-Host "Using basic authentication..." -ForegroundColor Yellow
        $SecuredPassword = ConvertTo-SecureString -AsPlainText $Password -Force
        $Credential = New-Object System.Management.Automation.PSCredential $UserName, $SecuredPassword
        $Team = Connect-MicrosoftTeams -Credential $Credential
    }
    # Interactive authentication (default)
    else {  
        Write-Host "Using interactive authentication..." -ForegroundColor Yellow
        $Team = Connect-MicrosoftTeams
    }

    # Check for Teams connectivity
    if ($null -ne $Team) {
        Write-Host "✓ Successfully connected to Microsoft Teams" -ForegroundColor Green
        Write-Host "Account: $($Team.Account)" -ForegroundColor Cyan
        Write-Host "Tenant: $($Team.TenantId)" -ForegroundColor Cyan
    }
    else {
        Write-Host "✗ Error occurred while creating Teams session. Please try again" -ForegroundColor Red
        exit 1
    }
}
catch {
    Write-Host "✗ Connection failed: $($_.Exception.Message)" -ForegroundColor Red
    exit 1
}

# Initialize variables and file paths
$Result = ""  
$Count = 0
$PrintedTeams = 0
$Location = Get-Location
$TimeStamp = (Get-Date -format "yyyy-MMM-dd-ddd_hh-mm-ss_tt").ToString()

# Create output file paths with improved naming
if (-not $DetailedOnly) {
    $ExportCSV = "$Location\Teams_with_Guests_Summary_$TimeStamp.csv"
}
if (-not $SummaryOnly) {
    $ExportResult = "$Location\Teams_Guest_Details_$TimeStamp.csv"
}

Write-Host "Starting Teams guest user analysis..." -ForegroundColor Cyan

# Get all teams or filter by specific team name
$TeamsToProcess = if ($TeamName) {
    Get-Team | Where-Object { $_.DisplayName -like "*$TeamName*" }
} else {
    Get-Team
}

if ($null -eq $TeamsToProcess -or $TeamsToProcess.Count -eq 0) {
    $filterMsg = if ($TeamName) { " matching '$TeamName'" } else { "" }
    Write-Host "No teams found$filterMsg" -ForegroundColor Yellow
    exit 0
}

Write-Host "Found $($TeamsToProcess.Count) team(s) to process" -ForegroundColor Green

$TeamsToProcess | ForEach-Object {
    $TeamDisplayName = $_.DisplayName
    $ProcessTeam = $false
    $GuestCount = 0
    $Count++
 
    $ProgressPercent = [math]::Round(($Count / $TeamsToProcess.Count) * 100, 1)
    Write-Progress -Activity "Processing Teams for Guest Users" -Status "Team: $TeamDisplayName ($Count of $($TeamsToProcess.Count))" -PercentComplete $ProgressPercent
    
    $GroupId = $_.GroupId
    
    try {
        $GuestUsers = Get-TeamUser -GroupId $GroupId -Role Guest -ErrorAction SilentlyContinue
        
        if ($GuestUsers) {
            $ProcessTeam = $true
            
            $GuestUsers | ForEach-Object {
                $GuestCount++
                $GuestName = $_.Name
                $MemberMail = $_.User
                
                # Export detailed report if not summary only
                if (-not $SummaryOnly) {
                    $Result = [PSCustomObject]@{
                        'Team Name' = $TeamDisplayName
                        'Guest Name' = $GuestName
                        'Guest Email' = $MemberMail
                        'Guest ID' = $_.UserId
                        'Processed Date' = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
                    }
                    $Result | Export-Csv $ExportResult -NoTypeInformation -Append
                }
            }
        }
        
        # Export summary report if team has guests and not detailed only
        if ($ProcessTeam -and (-not $DetailedOnly)) {
            $PrintedTeams++
            $ExportResults = [PSCustomObject]@{
                'Team Name' = $TeamDisplayName
                'Guest Count' = $GuestCount
                'Team ID' = $GroupId
                'Processed Date' = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
            }
            $ExportResults | Export-Csv -Path $ExportCSV -NoTypeInformation -Append
        }
        
        if ($ProcessTeam) {
            Write-Host "  ✓ ${TeamDisplayName}: $GuestCount guest(s)" -ForegroundColor Green
        }
    }
    catch {
        Write-Host "  ✗ Error processing team '$TeamDisplayName': $($_.Exception.Message)" -ForegroundColor Red
    }
}
# Display completion summary
Write-Progress -Activity "Processing Teams for Guest Users" -Completed
Write-Host "`n=== Analysis Complete ===" -ForegroundColor Cyan
Write-Host "Teams processed: $Count" -ForegroundColor Yellow
Write-Host "Teams with guests: $PrintedTeams" -ForegroundColor Yellow

if ($PrintedTeams -gt 0) {
    Write-Host "`nOutput files created:" -ForegroundColor Green
    
    if (-not $DetailedOnly -and (Test-Path -Path $ExportCSV)) {
        Write-Host "  📊 Summary Report: $ExportCSV" -ForegroundColor Cyan
    }
    
    if (-not $SummaryOnly -and (Test-Path -Path $ExportResult)) {
        Write-Host "  📋 Detailed Report: $ExportResult" -ForegroundColor Cyan
    }
    
    Write-Host "`n~~ Script prepared by AdminDroid Community ~~" -ForegroundColor Green
    Write-Host "~~ Check out " -NoNewline -ForegroundColor Green
    Write-Host "admindroid.com" -ForegroundColor Yellow -NoNewline
    Write-Host " to get access to 1800+ Microsoft 365 reports. ~~" -ForegroundColor Green
    
    # Prompt to open output files
    $Prompt = New-Object -ComObject wscript.shell      
    $UserInput = $Prompt.popup("Do you want to open output file?", 0, "Open Output File", 4)   
    if ($UserInput -eq 6) {   
        if (-not $DetailedOnly -and (Test-Path -Path $ExportCSV)) {
            Invoke-Item "$ExportCSV"   
        }
        if (-not $SummaryOnly -and (Test-Path -Path $ExportResult)) {
            Invoke-Item $ExportResult
        }
    } 
}
else {
    Write-Host "`nNo teams with guest users found." -ForegroundColor Yellow
    $filterMsg = if ($TeamName) { " matching '$TeamName'" } else { "" }
    Write-Host "All teams processed$filterMsg contain only internal members." -ForegroundColor Yellow
}

# Cleanup and disconnect
try {
    Disconnect-MicrosoftTeams -Confirm:$false -ErrorAction SilentlyContinue
    Write-Host "`n✓ Disconnected from Microsoft Teams" -ForegroundColor Cyan
}
catch {
    # Ignore disconnect errors
}
